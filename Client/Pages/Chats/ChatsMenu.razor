@inject NavigationManager _navigationManager
@inject ISessionStorageService _sessionStorage
@inject IJSRuntime _jsRuntime

<div id="chats-container">
    <div id="chats">
        <button @onclick="ToggleMenu" id="open-chats-btn" class="btn btn-outline-light">
            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" class="bi bi-chat-left-text" viewBox="0 0 16 16">
                <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                    <path d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"/>
            </svg>
        </button>
        
        @if (this.isOpen)
        {
            <ul class="list-group" id="chat-list">
                <li class="list-group-item bg-light text-dark">dostępne czaty</li>
                @if (!(chats is null))
                {
                    @foreach (var chat in chats)
                    {            
                        <ChatBox chat="chat" loadMessages="(args) => LoadMessages(chat.Id)"/>
                    }
                }
            </ul>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<List<Message>> OnMessageLoad { get; set; }

    [Parameter]
    public int ViewedChatId { get; set; }

    private Chat chatModel = new();

    private List<Chat> chats = new();

    private bool isOpen;

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private void ToggleMenu()
    {
        this.isOpen = !this.isOpen;
    }

    private async Task Load()
    {
        string url = $"{_navigationManager.BaseUri}api/chats/get";

        User user = await _sessionStorage.GetItemAsync<User>("CURRENT_USER");
        
        object body = new 
        {
            id = user.Id
        };

        using HttpClient httpClient = new();
        string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");
        
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

        var response = await httpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            chats = response.Content.ReadFromJsonAsync<Chat[]>().Result.ToList();
            
            StateHasChanged();
        }
    }

    private async Task LoadMessages(int chatId)
    {
        ViewedChatId = chatId;
        
        await _jsRuntime.InvokeVoidAsync("console.log", $"chat id {chatId}");
        
        string url = $"{_navigationManager.BaseUri}api/msg/get";

        object body = new 
        {
            id = chatId
        };
        
        using HttpClient httpClient = new();
        string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");
        
        await _jsRuntime.InvokeVoidAsync("console.log", body);
        
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

        var response = await httpClient.PostAsJsonAsync(url, body);

        await _jsRuntime.InvokeVoidAsync("console.log", await response.Content.ReadAsStringAsync());

        if (response.IsSuccessStatusCode)
        {
            await OnMessageLoad.InvokeAsync(await response.Content.ReadFromJsonAsync<List<Message>>());
            StateHasChanged();
        }
    }

}
