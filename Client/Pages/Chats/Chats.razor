@page "/chats"

@using chattr.Client.Pages.Chats.MessageBox

@inject IJSRuntime _jsRuntime
@inject ISessionStorageService _sessionStorage
@inject NavigationManager _navigationManager

<div>
    <div>
        <div id="msg-form">
            <EditForm Model="messageModel" OnValidSubmit="SendMessage">
                <div class="input-group">
                    <InputText @bind-Value="messageModel.Content"
                               placeholder="treść wiadomości"
                               class="form-control" />
                    <div class="input-group-prepend">
                        <button class="input-group-text btn btn-success"
                                type="submit">
                            wyślij
                        </button>
                    </div>
                    <div class="input-group-prepend">
                         <select class="input-group-text custom-select"
                                 @onchange="(ChangeEventArgs e) => { this.selectedChatId = int.Parse(e.Value.ToString()); }">
                             @if (this._chats.Count() != 0)
                             {
                                @foreach (Chat chat in _chats)
                                { 
                                    <option value="@chat.Id">@chat.Topic</option>
                                }
                             }
                         </select>
                    </div>
                </div>
            </EditForm>
        </div>

        <div class="container-fluid bg-dark">
            <ChatsMenu OnMessageLoad="MessagesLoaded" />

            <div>
                @if (_messages is not null && _currentUser is not null)
                {
                    @foreach (var msg in _messages)
                    {
                        <MessageBox message="msg" currentUser="_currentUser" />
                    }
                }
            </div>
        </div>
    </div>

    @if (this.isSpinnerShown)
    {
        <Spinner />
    }
</div>

@code {

    private int selectedChatId;

    private List<Chat> _chats = new();

    private bool isSpinnerShown = false;

    private Message messageModel = new();

    private List<Message> _messages;

    private User _currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadChats();
    }

    private async Task LoadChats()
    {
        string url = $"{_navigationManager.BaseUri}api/chats/get";

        using HttpClient httpClient = new();

        this.isSpinnerShown = true;

        string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");


        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

        using var response = await httpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            this._chats = response.Content.ReadFromJsonAsync<Chat[]>().Result.ToList();

            //await _jsRuntime.InvokeVoidAsync("console.log", $"dane do selecta: {JsonConvert.SerializeObject(response.Content.ReadFromJsonAsync<Chat[]>().Result.ToList())}");

            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        // await _jsRuntime.InvokeVoidAsync("console.log", JsonConvert.SerializeObject(context));
        await _jsRuntime.InvokeVoidAsync("console.log", this.selectedChatId);

        object body = new
        {
            content = messageModel.Content,
            userid = (await _sessionStorage.GetItemAsync<User>("CURRENT_USER")).Id,
            chatid = this.selectedChatId
        };

        string url = $"{_navigationManager.BaseUri}api/msg/send";
        using HttpClient httpClient = new();

        this.isSpinnerShown = true;

        string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");


        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

        using var response = await httpClient.PostAsJsonAsync(url, body);

        if (response.IsSuccessStatusCode)
        {
            StateHasChanged();
        }
    }

    private async Task MessagesLoaded(List<Message> messages)
    {
        _messages = messages;
        await _jsRuntime.InvokeVoidAsync("console.log", messages);

        _currentUser = await _sessionStorage.GetItemAsync<User>("CURRENT_USER");
        StateHasChanged();
    }
}