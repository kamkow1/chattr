@page "/chats"

@using chattr.Client.Pages.Chats.MessageBox

@inject IJSRuntime _jsRuntime
@inject ISessionStorageService _sessionStorage
@inject NavigationManager _navigationManager

<div>
    <div>
        <div id="msg-form">
            <EditForm Model="messageModel" OnValidSubmit="SendMessage">
                <div class="input-group">
                    <InputText @bind-Value="messageModel.Content"
                               placeholder="treść wiadomości"
                               class="form-control" />
                    <div class="input-group-prepend">
                        <button class="input-group-text btn btn-success"
                                type="submit">
                            wyślij
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>

        <div class="container-fluid bg-dark">
            <ChatsMenu OnMessageLoad="MessagesLoaded" />

            <div>
                @if (_messages is not null && _currentUser is not null)
                {
                    @foreach (var msg in _messages)
                    {
                        <MessageBox message="msg" currentUser="_currentUser"  />
                    }
                }
                
                @if (!_messages.Any()) 
                { 
                    <p class="text-warning">brak wiadomości w tym czacie...</p>
                }
            </div>
        </div>
    </div>

    @if (this.isSpinnerShown)
    {
        <Spinner />
    }
</div>

@code {

    private bool wasChatLoadingSuccessful;

    private int selectedChatId;

    private List<Chat> _chats = new();

    private bool isSpinnerShown = false;

    private Message messageModel = new();

    private List<Message> _messages = new();

    private User _currentUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadChats();
    }

    private async Task LoadChats()
    {
        string url = $"{_navigationManager.BaseUri}api/chats/get";

        using HttpClient httpClient = new();

        this.isSpinnerShown = true;

        string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");


        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

        using var response = await httpClient.GetAsync(url);

        if (((int)response.StatusCode) == 404)
        {
            this.wasChatLoadingSuccessful = false;

            StateHasChanged();
        }

        if (response.IsSuccessStatusCode)
        {
            this._chats = response.Content.ReadFromJsonAsync<Chat[]>().Result.ToList();

            this.isSpinnerShown = false;

            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        object body = new
        {
            content = messageModel.Content,
            userid = (await _sessionStorage.GetItemAsync<User>("CURRENT_USER")).Id,
            chatid = this.selectedChatId
        };

        string url = $"{_navigationManager.BaseUri}api/msg/send";
        using HttpClient httpClient = new();

        this.isSpinnerShown = true;

        string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");


        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

        using var response = await httpClient.PostAsJsonAsync(url, body);

        if (response.IsSuccessStatusCode)
        {
            this.isSpinnerShown = false;

            StateHasChanged();
        }
    }

    private async Task MessagesLoaded(List<Message> messages)
    {
        _messages = messages;

        _currentUser = await _sessionStorage.GetItemAsync<User>("CURRENT_USER");

        if (messages.Any())
        {
            selectedChatId = messages.Select(m => m.ChatId).First();
        }

        StateHasChanged();
    }
}