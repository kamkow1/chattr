@page "/login"
@using Newtonsoft.Json
@using chattr.Shared.Models
@using Blazored.SessionStorage
@using System.Net.Http.Headers

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject ISessionStorageService _sessionStorage


<div id="login-form">
    <EditForm Model="@userModel" OnValidSubmit="@HandleSubmit">
        <div class="form-group">
            <label for="login">login</label>
            <InputText 
                id="login" 
                @bind-Value="userModel.Login" 
                class="form-control"
                placeholder="wpisz login"
                />
        </div>
        <div class="form-group">
            <label for="login">Hasło</label>
            <InputText 
                id="password" 
                @bind-Value="userModel.Password" 
                class="form-control"
                placeholder="wpisz hasło"
                />
        </div>
  
        <button class="btn btn-primary">zaloguj</button>

        <a href="/register" class="custom-link">nie masz konta? zarejestruj się!</a>
    </EditForm>
</div>

@code {
    private User userModel = new();

    private async Task HandleSubmit()
    {
        string url = $"{_navigationManager.BaseUri}api/users/auth";

        object body = new 
        {
            login = userModel.Login,
            password = userModel.Password
        };

        using HttpClient client = new();
        using var response = await client.PostAsJsonAsync<object>(url, body);

        if (response.IsSuccessStatusCode) 
        {
            await _sessionStorage.SetItemAsStringAsync("API_TOKEN", response.Content.ReadAsStringAsync().Result
                .Replace('"', ' ')
                .Replace("token", "")
                .Replace(":", "")
                .Replace("{", "")
                .Replace("}", ""));

            string urlToCurrentUser = $"{_navigationManager.BaseUri}api/users/login";

            using HttpClient httpClient = new();
            string token = await _sessionStorage.GetItemAsync<string>("API_TOKEN");

            await _jsRuntime.InvokeVoidAsync("console.log", token);
            
            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);

            await _jsRuntime.InvokeVoidAsync("console.log", httpClient);
            
            using var responseFromGetCurrentUser = await httpClient.PostAsJsonAsync<object>(urlToCurrentUser, body);
            await _jsRuntime.InvokeVoidAsync("console.log", responseFromGetCurrentUser.Content.ReadAsStringAsync().Result);

            await _sessionStorage.SetItemAsync<User>("CURRENT_USER", JsonConvert.DeserializeObject<User>(responseFromGetCurrentUser.Content.ReadAsStringAsync().Result));

            _navigationManager.NavigateTo("/");
        }
    }

}